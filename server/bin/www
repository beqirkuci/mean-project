#!/usr/bin/env node
var debug = require('debug')('app.js');
/**
 * Module dependencies.
 */
var socketEvents = require('../socketEvents');
var app = require('../app');
var debug = require('debug')('project-name:server');
const http = require('http');
const fs = require('fs');
var path = require('path');
var jwt = require('express-jwt');
var Chat = require('../api/models/messageOfChat');
var Conversation = require('../api/models/conversation');
var User = require('../api/models/users');
var ConversationNotifications = require('../api/models/conversationNotifications');
var mongoosePaginate = require('mongoose-paginate');
var async = require("async");


var auth = jwt({
  secret: 'MY_SECRET',
  userProperty: 'payload'
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(require('helmet')());

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

console.log('todo list RESTful API server started on: ' + port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

